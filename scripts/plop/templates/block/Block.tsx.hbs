import { type FragmentOf, graphql, readFragment } from "@/lib/datocms/graphql";

/**
 * Let's define the GraphQL fragment needed for the component to function.
 *
 * GraphQL fragment colocation keeps queries near the components using them,
 * improving maintainability and encapsulation. Fragment composition enables
 * building complex queries from reusable parts, promoting code reuse and
 * efficiency. Together, these practices lead to more modular, maintainable, and
 * performant GraphQL implementations by allowing precise data fetching and
 * easier code management.
 *
 * Learn more: https://gql-tada.0no.co/guides/fragment-colocation
 */
export const {{pascalCase name}}Fragment = graphql(
  /* GraphQL */ `
    fragment {{pascalCase name}}Fragment on {{pascalCase name}}Record {
      id
      # Define the fields needed for the component
    }
  `,
  [
    // Import any nested fragments needed for the component
  ],
);

type Props = {
  data: FragmentOf<typeof {{pascalCase name}}Fragment>;
};

export default function {{pascalCase name}}({ data }: Props) {
  // Read unmasked data from fragment
  const { id } = readFragment({{pascalCase name}}Fragment, data);

  return (
    <div>
      <p>{id}</p>
    </div>
  );
}
